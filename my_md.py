#!/usr/bin/env python3
# pip install -U telegramify-markdown


import re
from typing import List, Match, Optional, Tuple

import textwrap
import telegramify_markdown
from telegramify_markdown import customize


customize.markdown_symbol.head_level_1 = "üìå"  # If you want, Customizing the head level 1 symbol
customize.markdown_symbol.link = "üîó"  # If you want, Customizing the link symbol
# customize.strict_markdown = True  # If you want to use __underline__ as underline, set it to False, or it will be converted to bold as telegram does.
customize.cite_expandable = True  # If you want to enable expandable citation, set it to True.
customize.latex_escape = True  # If you want to escape LaTeX symbols, set it to True.

customize.strict_markdown = False


def sub_sp_symbols(text: str) -> str:
    # –°–ª–æ–≤–∞—Ä—å –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    subscript_map = {
        '0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ', '5': '‚ÇÖ',
        '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ',
        '+': '‚Çä', '-': '‚Çã', '=': '‚Çå', '(': '‚Çç', ')': '‚Çé',
        'a': '‚Çê',
        # 'b': '‚ô≠', 
        'c': 'ÍúÄ',
        # 'd': '·ëØ',
        'e': '‚Çë',
        # 'f': '‚®ç',
        'g': '‚Çâ',
        'h': '‚Çï',
        'i': '·µ¢',
        'j': '‚±º',
        'k': '‚Çñ',
        'l': '‚Çó',
        'm': '‚Çò',
        'n': '‚Çô',
        'o': '‚Çí',
        'p': '‚Çö',
        # 'q': '‡´ß',
        'r': '·µ£',
        's': '‚Çõ',
        't': '‚Çú',
        'u': '·µ§',
        'v': '·µ•',
        # 'w': 'w',
        'x': '‚Çì',
        'y': '·µß',
        'z': '‚ÇÇ'
    }

    # –°–ª–æ–≤–∞—Ä—å –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    superscript_map = {
        '0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥', '4': '‚Å¥', '5': '‚Åµ',
        '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ',
        '+': '‚Å∫', '-': '‚Åª', '=': '‚Åº', '(': '‚ÅΩ', ')': '‚Åæ',
        'a': '·µÉ',
        'b': '·µá',
        'c': '·∂ú',
        'd': '·µà',
        'e': '·µâ',
        'f': '·∂†',
        'g': '·µç',
        'h': ' ∞',
        'i': '‚Å±',
        'j': ' ≤',
        'k': '·µè',
        'l': 'À°',
        'm': '·µê',
        'n': '‚Åø',
        'o': '·µí',
        'p': '·µñ',
        'q': 'êû•', 
        'r': ' ≥',
        's': 'À¢',
        't': '·µó',
        'u': '·µò',
        'v': '·µõ',
        'w': ' ∑',
        'x': 'À£',
        'y': ' ∏',
        'z': '·∂ª'
    }

    # –∑–∞–º–µ–Ω–∞ —Ç–µ–≥–æ–≤ <sub> <sup> –Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'<sup\\>(.*?)</sup\\>', lambda m: ''.join(superscript_map.get(c, c) for c in m.group(1)), text)
    text = re.sub(r'<sub\\>(.*?)</sub\\>', lambda m: ''.join(subscript_map.get(c, c) for c in m.group(1)), text)

    return text


def process_block(match: Match[str]) -> str:
    """
    Process a single code block match by removing common indentation.
    
    Args:
        match: Regular expression match object containing the code block
        
    Returns:
        Processed code block with normalized indentation and triple backticks
    """
    indent: str = match.group(1)  # Leading whitespace
    lang: str = match.group(2)    # Language identifier
    code: str = match.group(3)    # Code content
    
    # Split into lines and remove trailing whitespace
    lines: list[str] = code.rstrip().split('\n')
    
    # Find the minimum indent of non-empty lines
    min_indent: int = min(
        len(line) - len(line.lstrip())
        for line in lines
        if line.strip()
    )
    
    # Remove the common indentation from each line
    normalized_lines: list[str] = [
        line[min_indent:] if line.strip() else ''
        for line in lines
    ]
    
    # Join lines back together
    normalized_code: str = '\n'.join(normalized_lines)
    
    # Construct the final block with triple backticks
    return f"{indent}```{lang}\n{normalized_code}\n{indent}```"


def convert_code_blocks(text: str) -> str:
    """
    Convert single-backtick code blocks to triple-backtick blocks in markdown text,
    removing common indentation from the code content.
    
    Args:
        text: Input markdown text containing code blocks
        
    Returns:
        Text with converted code blocks using triple backticks and normalized indentation
    """
    pattern: str = r'([ \t]*)`(\w*)\n(.*?)\n\1`'
    return re.sub(
        pattern,
        process_block,
        text,
        flags=re.DOTALL | re.MULTILINE
    )


def md2md(text: str) -> str:
    text = textwrap.dedent(text)
    # text = convert_code_blocks(text)

    converted = telegramify_markdown.markdownify(
        text,
        max_line_length=None,  # If you want to change the max line length for links, images, set it to the desired value.
        normalize_whitespace=False
    )
    # converted = sub_sp_symbols(converted)
    return converted


def chunk_markdown(text: str, max_chunk_size: int = 3000) -> List[str]:
    """
    Split markdown text into chunks of specified maximum size while preserving code blocks.
    
    Args:
        text: Input markdown text
        max_chunk_size: Maximum allowed size of each chunk
        
    Returns:
        List of markdown text chunks
    """
    chunks: List[str] = []
    current_chunk: List[str] = []
    current_size: int = 0
    in_code_block: bool = False
    code_block_header: Optional[str] = None
    pending_code_block_end: bool = False

    # Split text into lines while preserving empty lines
    lines: List[str] = text.splitlines(keepends=True)

    def add_chunk() -> None:
        """Helper function to add accumulated lines as a new chunk."""
        nonlocal current_size
        if current_chunk:
            chunks.append(''.join(current_chunk))
            current_chunk.clear()
            current_size = 0

    def is_code_block_start(line: str) -> Tuple[bool, Optional[str]]:
        """
        Check if line is a code block start and extract its header.

        Returns:
            Tuple of (is_start: bool, header: Optional[str])
        """
        stripped = line.lstrip()
        if stripped.startswith('```'):
            return True, line.rstrip()
        return False, None

    def is_code_block_end(line: str) -> bool:
        """Check if line is a code block end."""
        return line.lstrip().startswith('```') and not line.lstrip()[3:].strip()

    for i, line in enumerate(lines):
        line_size = len(line)
        # next_line = lines[i + 1] if i + 1 < len(lines) else None

        # Handle code block boundaries
        if not in_code_block:
            is_start, header = is_code_block_start(line)
            if is_start:
                in_code_block = True
                code_block_header = header
                pending_code_block_end = False
        else:
            if is_code_block_end(line):
                in_code_block = False
                code_block_header = None
                pending_code_block_end = False

        # Start new chunk if current would exceed max size
        if current_size + line_size > max_chunk_size and current_chunk:
            if in_code_block and not pending_code_block_end:
                current_chunk.append('```\n')  # Close code block in current chunk
                pending_code_block_end = True
            add_chunk()
            if in_code_block and code_block_header:
                current_chunk.append(f'{code_block_header}\n')  # Reopen code block in new chunk
                pending_code_block_end = False
            current_size = line_size
        else:
            current_size += line_size

        # Skip adding closing tag if it's already pending
        if pending_code_block_end and is_code_block_end(line):
            continue

        current_chunk.append(line)

    # Add final chunk
    add_chunk()

    return chunks


if __name__ == '__main__':
    pass
    # Use `r` to avoid escaping the backslash.
    markdown_text = r""" 
1. **–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç **`begin`** –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
    `pascal
    program Program1;

    {... –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä ...}

    {* –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å begin *}

    end.  // <- –°—Ç—Ä–æ–∫–∞ 24
    `

   **–†–µ—à–µ–Ω–∏–µ:** –î–æ–±–∞–≤—å—Ç–µ `begin` –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π 24 (–∏–ª–∏ —Ç–∞–º, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∫–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã).


"""

    r = chunk_markdown(md2md(markdown_text))
    print(r)
